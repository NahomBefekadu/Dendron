{"pageProps":{"note":{"id":"2Le3ECpJu2ToCytLinw8q","title":"Island Count","desc":"","updated":1644895234897,"created":1643600146089,"custom":{},"fname":"problems.graphs.island-count","type":"note","vault":{"fsPath":"vault"},"contentHash":"a75c45962989eb3cea3369a4a77c6e3d","links":[{"type":"wiki","from":{"fname":"problems.graphs.island-count","id":"2Le3ECpJu2ToCytLinw8q","vaultName":"vault"},"value":"data-structures.Graphs","alias":"data-structures.Graphs","position":{"start":{"line":80,"column":3,"offset":2435},"end":{"line":80,"column":29,"offset":2461},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"data-structures.Graphs"}},{"type":"wiki","from":{"fname":"problems.graphs.island-count","id":"2Le3ECpJu2ToCytLinw8q","vaultName":"vault"},"value":"data-structures.Graphs.traverse","alias":"data-structures.Graphs.traverse","position":{"start":{"line":81,"column":3,"offset":2464},"end":{"line":81,"column":38,"offset":2499},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"data-structures.Graphs.traverse"}}],"anchors":{"question":{"type":"header","text":"Question","value":"question","line":8,"column":0,"depth":2},"input":{"type":"header","text":"input:","value":"input","line":14,"column":0,"depth":4},"output":{"type":"header","text":"Output:","value":"output","line":25,"column":0,"depth":4},"solution":{"type":"header","text":"Solution","value":"solution","line":29,"column":0,"depth":2},"javascript":{"type":"header","text":"Javascript","value":"javascript","line":41,"column":0,"depth":4},"java":{"type":"header","text":"Java","value":"java","line":78,"column":0,"depth":4},"concepts":{"type":"header","text":"Concepts","value":"concepts","line":84,"column":0,"depth":2},"patterns":{"type":"header","text":"Patterns","value":"patterns","line":89,"column":0,"depth":2}},"children":[],"parent":"HixUbuAbnjKP6JGNYQSZd","data":{}},"body":"<h1 id=\"island-count\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#island-count\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Island Count</h1>\n<h2 id=\"question\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#question\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Question</h2>\n<p>Given a grid of 1s and 0s. where 0 represents water and 1 represents land. You should return the number of islands on the given grid.</p>\n<p>definition of an island is a land vertically or horizontally connected.</p>\n<h4 id=\"input\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#input\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>input:</h4>\n<pre class=\"language-javascript\"><code class=\"language-javascript\">grid <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"0\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"0\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"0\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"0\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"0\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"0\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">\"0\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"0\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"0\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"0\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"0\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h4 id=\"output\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#output\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Output:</h4>\n<p>Output: 1</p>\n<h2 id=\"solution\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#solution\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Solution</h2>\n<p>This is different from the format we've usually seen for our graphs, instead of an adjacency list we're given now a grid instead.</p>\n<p>To solve this question we have two choices either depth-first or breadth-first. So we can solve this by iterating over the grid to move to each node, and at each point calling our depth first function. to iterate through and find an island at that particular point. If we find an island we return and increment our island counter.</p>\n<p>When we go through our islands, we will still be using the same principles as before, making use of a set to keep track of all points visited by our function.</p>\n<p>We first need a way to iterate through our given grid, and we can do that simply using two for loops, after that we will be calling our depth-first function at each point on the grid.</p>\n<p>Within our depth-first function we set up the bounds of the given grid, so that when we run this function recursively, we are checking against the bounds we set, to see if the given point is valid. if it's not valid we can simply return false, same if the point we're checking is water or it has been visited before.</p>\n<h4 id=\"javascript\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#javascript\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Javascript</h4>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">numIslands</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">grid</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> visited <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword control-flow\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> row <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> row <span class=\"token operator\">&#x3C;</span> grid<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span><span class=\"token punctuation\">;</span> row<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> col <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> col <span class=\"token operator\">&#x3C;</span> grid<span class=\"token punctuation\">[</span>row<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span><span class=\"token punctuation\">;</span> col<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">helper</span><span class=\"token punctuation\">(</span>grid<span class=\"token punctuation\">,</span> row<span class=\"token punctuation\">,</span> col<span class=\"token punctuation\">,</span> visited<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword control-flow\">return</span> count<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">helper</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">grid<span class=\"token punctuation\">,</span> row<span class=\"token punctuation\">,</span> col<span class=\"token punctuation\">,</span> visited</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> rowBound <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&#x3C;=</span> row <span class=\"token operator\">&#x26;&#x26;</span> row <span class=\"token operator\">&#x3C;</span> grid<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> colBound <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&#x3C;=</span> col <span class=\"token operator\">&#x26;&#x26;</span> col <span class=\"token operator\">&#x3C;</span> grid<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>rowBound <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>colBound<span class=\"token punctuation\">)</span> <span class=\"token keyword control-flow\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>grid<span class=\"token punctuation\">[</span>row<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>col<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token string\">\"0\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword control-flow\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> position <span class=\"token operator\">=</span> row <span class=\"token operator\">+</span> <span class=\"token string\">\",\"</span> <span class=\"token operator\">+</span> col<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>visited<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">has</span><span class=\"token punctuation\">(</span>position<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword control-flow\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  visited<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">add</span><span class=\"token punctuation\">(</span>position<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">helper</span><span class=\"token punctuation\">(</span>grid<span class=\"token punctuation\">,</span> row <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> col<span class=\"token punctuation\">,</span> visited<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">helper</span><span class=\"token punctuation\">(</span>grid<span class=\"token punctuation\">,</span> row <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> col<span class=\"token punctuation\">,</span> visited<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">helper</span><span class=\"token punctuation\">(</span>grid<span class=\"token punctuation\">,</span> row<span class=\"token punctuation\">,</span> col <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> visited<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">helper</span><span class=\"token punctuation\">(</span>grid<span class=\"token punctuation\">,</span> row<span class=\"token punctuation\">,</span> col <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> visited<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h4 id=\"java\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#java\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Java</h4>\n<pre class=\"language-java\"><code class=\"language-java\"></code></pre>\n<h2 id=\"concepts\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#concepts\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Concepts</h2>\n<ul>\n<li><a href=\"/Dendron/notes/0KnFMcqYC3OeDpEnawCaX\">Graphs</a></li>\n<li><a href=\"/Dendron/notes/63ZhGIihw53C7PA2UxsVS\">Traverse</a></li>\n</ul>\n<h2 id=\"patterns\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#patterns\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Patterns</h2>\n<ul>\n<li>DFS</li>\n<li>Set/Map</li>\n</ul>","noteIndex":{"id":"vVFnvX3AZLb21JIc7L4gm","title":"Root","desc":"","updated":1641184503497,"created":1640015760017,"custom":{"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":"vault"},"contentHash":"dbe76e060067b9059e208c353b2be0be","links":[],"anchors":{"computer-science-library":{"type":"header","text":"Computer Science Library","value":"computer-science-library","line":8,"column":0,"depth":1}},"children":["Yvra9LpGoPLi4Kk2KKGsK","jL0XOOMd1sy4tgf2SWfg5","rydiHYJbn3JhvGgWrK9Sl","l8rNoqR6OrTiJzqzAsfms","Zd60tpALGBOrNJC2avO70","aVtnDm5TBmQfxOgRoc0m1","gh9HX9yN4MF2djOLFCV3N","BeyqjmB3iu9oewp7hCpqg","PbPnrOhcARThoz7ymnam8"],"parent":null,"data":{},"body":"\n# Computer Science Library\n\nThis is a collection of notes ranging from data structures and problems to specific knowledge of a programming language. It is a stored knowledge of different programming languages and applications for easy retrieval and note keeping.\n\nThis repository will be continually updated and maintained as knowledge base grows and aspects of languages are updated.\n\n![](/assets/images/2022-01-02-23-34-36.png)\n"},"collectionChildren":null,"customHeadContent":null,"config":{"version":4,"useFMTitle":true,"useNoteTitleForLink":true,"mermaid":true,"useKatex":true,"dev":{"enablePreviewV2":true},"site":{"assetsPrefix":"/Dendron","siteUrl":"https://nahombefekadu.github.io","copyAssets":true,"siteHierarchies":["root"],"siteRootDir":"docs","usePrettyRefs":true,"title":"Dendron","description":"Personal knowledge space","siteLastModified":true,"gh_edit_branch":"main","duplicateNoteBehavior":{"action":"useVault","payload":["vault"]},"usePrettyLinks":true,"siteNotesDir":"notes","siteFaviconPath":"favicon.ico","gh_edit_link":true,"gh_edit_link_text":"Edit this page on GitHub","gh_root":"docs/","gh_edit_view_mode":"edit","writeStubs":true,"siteIndex":"root"},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":false,"leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2,"vaultSelectionModeOnCreate":"smart"}},"randomNote":{},"insertNote":{"initialValue":"templates"},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"copyNoteLink":{}},"workspace":{"vaults":[{"fsPath":"vault"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"task":{"name":"","dateFormat":"","addBehavior":"childOfCurrent","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link"},"graph":{"zoomSpeed":1},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"enableUserTags":true,"enableHashTags":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":false,"enableEditorDecorations":true,"maxPreviewsCached":10,"maxNoteLength":204800},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableMermaid":true,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false}}},"__N_SSG":true}