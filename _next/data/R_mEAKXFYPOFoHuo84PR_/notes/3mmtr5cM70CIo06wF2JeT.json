{"pageProps":{"note":{"id":"3mmtr5cM70CIo06wF2JeT","title":"longest-repeating-char-replacement","desc":"","updated":1645219331247,"created":1645195993234,"custom":{},"fname":"Problems.strings.longest-repeating-char-replacement","type":"note","vault":{"fsPath":"vault"},"contentHash":"8afc7d69f0224460007dde53cd3b71da","links":[{"type":"wiki","from":{"fname":"Problems.strings.longest-repeating-char-replacement","id":"3mmtr5cM70CIo06wF2JeT","vaultName":"vault"},"value":"data-structures.arrays","alias":"data-structures.arrays","position":{"start":{"line":57,"column":3,"offset":1688},"end":{"line":57,"column":29,"offset":1714},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"data-structures.arrays"}}],"anchors":{"question":{"type":"header","text":"Question","value":"question","line":8,"column":0,"depth":2},"input":{"type":"header","text":"input:","value":"input","line":14,"column":0,"depth":4},"output":{"type":"header","text":"Output:","value":"output","line":18,"column":0,"depth":4},"solution":{"type":"header","text":"Solution","value":"solution","line":22,"column":0,"depth":2},"javascript":{"type":"header","text":"Javascript","value":"javascript","line":26,"column":0,"depth":4},"java":{"type":"header","text":"Java","value":"java","line":55,"column":0,"depth":4},"concepts":{"type":"header","text":"Concepts","value":"concepts","line":61,"column":0,"depth":2},"patterns":{"type":"header","text":"Patterns","value":"patterns","line":65,"column":0,"depth":2}},"children":[],"parent":"0TYFP6PqOoYP3s56Pn5xH","data":{}},"body":"<h1 id=\"longest-repeating-char-replacement\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#longest-repeating-char-replacement\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>longest-repeating-char-replacement</h1>\n<h2 id=\"question\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#question\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Question</h2>\n<p>You are given a string s lowercase letters only, and an integer k. You can choose any character of the string and change it to any other lowercase English character. You can perform this operation at most k times.</p>\n<p>you are allowed to replace no more than k letters with any letter</p>\n<h4 id=\"input\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#input\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>input:</h4>\n<p>Input: s = \"aababba\", k = 1</p>\n<h4 id=\"output\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#output\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Output:</h4>\n<p>Output: 4</p>\n<h2 id=\"solution\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#solution\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Solution</h2>\n<p>Here we will be using our sliding window pattern to solve this, and a hash map to keep track of our characters. As we go through our array we will be also keeping count of number of times a character is repeated in our window. Then we can use this number and substract it from the window we currently have against our given k value. if the number is larger we know we cant replace the characters we have thus we have to shrink our window. We also take note of the length of the window and save it to our result. we keep repeating this throughout the whole string and return our longest substring.</p>\n<h4 id=\"javascript\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#javascript\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Javascript</h4>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">length_of_longest_substring</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">str<span class=\"token punctuation\">,</span> k</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> windowStart <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> mem <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> max <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> numOfChar <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword control-flow\">for</span> <span class=\"token punctuation\">(</span>windowEnd <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> windowEnd <span class=\"token operator\">&#x3C;</span> str<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span><span class=\"token punctuation\">;</span> windowEnd<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    char <span class=\"token operator\">=</span> str<span class=\"token punctuation\">[</span>windowEnd<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>char <span class=\"token keyword\">in</span> mem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      mem<span class=\"token punctuation\">[</span>char<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    mem<span class=\"token punctuation\">[</span>char<span class=\"token punctuation\">]</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    numOfChar <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">max</span><span class=\"token punctuation\">(</span>numOfChar<span class=\"token punctuation\">,</span> mem<span class=\"token punctuation\">[</span>char<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword control-flow\">while</span> <span class=\"token punctuation\">(</span>windowEnd <span class=\"token operator\">-</span> windowStart <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">-</span> numOfChar <span class=\"token operator\">></span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">let</span> removeChar <span class=\"token operator\">=</span> str<span class=\"token punctuation\">[</span>windowStart<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      mem<span class=\"token punctuation\">[</span>removeChar<span class=\"token punctuation\">]</span><span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>mem<span class=\"token punctuation\">[</span>removeChar<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">delete</span> mem<span class=\"token punctuation\">[</span>removeChar<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      windowStart<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    max <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">max</span><span class=\"token punctuation\">(</span>max<span class=\"token punctuation\">,</span> windowEnd <span class=\"token operator\">-</span> windowStart <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword control-flow\">return</span> max<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h4 id=\"java\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#java\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Java</h4>\n<pre class=\"language-java\"><code class=\"language-java\"></code></pre>\n<h2 id=\"concepts\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#concepts\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Concepts</h2>\n<ul>\n<li><a href=\"/Dendron/notes/0WlW3iokuTpYX6JNGAQAS\">Arrays</a></li>\n</ul>\n<h2 id=\"patterns\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#patterns\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Patterns</h2>\n<ul>\n<li>Sliding Window</li>\n<li>Map/Set</li>\n</ul>","noteIndex":{"id":"vVFnvX3AZLb21JIc7L4gm","title":"Root","desc":"","updated":1641184503497,"created":1640015760017,"custom":{"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":"vault"},"contentHash":"dbe76e060067b9059e208c353b2be0be","links":[],"anchors":{"computer-science-library":{"type":"header","text":"Computer Science Library","value":"computer-science-library","line":8,"column":0,"depth":1}},"children":["Yvra9LpGoPLi4Kk2KKGsK","jL0XOOMd1sy4tgf2SWfg5","rydiHYJbn3JhvGgWrK9Sl","l8rNoqR6OrTiJzqzAsfms","Zd60tpALGBOrNJC2avO70","aVtnDm5TBmQfxOgRoc0m1","gh9HX9yN4MF2djOLFCV3N","BeyqjmB3iu9oewp7hCpqg","PbPnrOhcARThoz7ymnam8"],"parent":null,"data":{},"body":"\n# Computer Science Library\n\nThis is a collection of notes ranging from data structures and problems to specific knowledge of a programming language. It is a stored knowledge of different programming languages and applications for easy retrieval and note keeping.\n\nThis repository will be continually updated and maintained as knowledge base grows and aspects of languages are updated.\n\n![](/assets/images/2022-01-02-23-34-36.png)\n"},"collectionChildren":null,"customHeadContent":null,"config":{"version":4,"useFMTitle":true,"useNoteTitleForLink":true,"mermaid":true,"useKatex":true,"dev":{"enablePreviewV2":true},"site":{"assetsPrefix":"/Dendron","siteUrl":"https://nahombefekadu.github.io","copyAssets":true,"siteHierarchies":["root"],"siteRootDir":"docs","usePrettyRefs":true,"title":"Dendron","description":"Personal knowledge space","siteLastModified":true,"gh_edit_branch":"main","duplicateNoteBehavior":{"action":"useVault","payload":["vault"]},"usePrettyLinks":true,"siteNotesDir":"notes","siteFaviconPath":"favicon.ico","gh_edit_link":true,"gh_edit_link_text":"Edit this page on GitHub","gh_root":"docs/","gh_edit_view_mode":"edit","writeStubs":true,"siteIndex":"root"},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":false,"leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2,"vaultSelectionModeOnCreate":"smart"}},"randomNote":{},"insertNote":{"initialValue":"templates"},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"copyNoteLink":{}},"workspace":{"vaults":[{"fsPath":"vault"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"task":{"name":"","dateFormat":"","addBehavior":"childOfCurrent","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link"},"graph":{"zoomSpeed":1},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"enableUserTags":true,"enableHashTags":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":false,"enableEditorDecorations":true,"maxPreviewsCached":10,"maxNoteLength":204800},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableMermaid":true,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false}}},"__N_SSG":true}