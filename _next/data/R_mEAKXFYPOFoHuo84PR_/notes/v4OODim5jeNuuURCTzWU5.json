{"pageProps":{"note":{"id":"v4OODim5jeNuuURCTzWU5","title":"Traverse","desc":"","updated":1644727484137,"created":1641096932336,"custom":{},"fname":"data-structures.binary-trees.traverse","type":"note","vault":{"fsPath":"vault"},"contentHash":"f9a8f101091132879aafc917e86890fd","links":[{"from":{"fname":"Problems.binary-search-trees.find-closest-value-in-bst","vaultName":"vault"},"type":"backlink","position":{"start":{"line":60,"column":3,"offset":933},"end":{"line":60,"column":44,"offset":974},"indent":[]},"value":"data-structures.binary-trees.traverse","alias":"data-structures.binary-trees.traverse"},{"from":{"fname":"problems.binary-tree.find-successor","vaultName":"vault"},"type":"backlink","position":{"start":{"line":74,"column":3,"offset":1272},"end":{"line":74,"column":44,"offset":1313},"indent":[]},"value":"data-structures.binary-trees.traverse","alias":"data-structures.binary-trees.traverse"},{"from":{"fname":"problems.binary-tree.height-balanced","vaultName":"vault"},"type":"backlink","position":{"start":{"line":99,"column":3,"offset":1820},"end":{"line":99,"column":44,"offset":1861},"indent":[]},"value":"data-structures.binary-trees.traverse","alias":"data-structures.binary-trees.traverse"},{"from":{"fname":"problems.binary-tree.invert-binary-tree","vaultName":"vault"},"type":"backlink","position":{"start":{"line":99,"column":3,"offset":1345},"end":{"line":99,"column":44,"offset":1386},"indent":[]},"value":"data-structures.binary-trees.traverse","alias":"data-structures.binary-trees.traverse"},{"from":{"fname":"problems.binary-tree.node-depths","vaultName":"vault"},"type":"backlink","position":{"start":{"line":84,"column":3,"offset":1256},"end":{"line":84,"column":44,"offset":1297},"indent":[]},"value":"data-structures.binary-trees.traverse","alias":"data-structures.binary-trees.traverse"},{"from":{"fname":"problems.binary-tree.tree-diameter","vaultName":"vault"},"type":"backlink","position":{"start":{"line":95,"column":3,"offset":1640},"end":{"line":95,"column":44,"offset":1681},"indent":[]},"value":"data-structures.binary-trees.traverse","alias":"data-structures.binary-trees.traverse"},{"from":{"fname":"problems.binary-tree.tree-sum","vaultName":"vault"},"type":"backlink","position":{"start":{"line":45,"column":3,"offset":639},"end":{"line":45,"column":44,"offset":680},"indent":[]},"value":"data-structures.binary-trees.traverse","alias":"data-structures.binary-trees.traverse"}],"anchors":{"depth-first-search":{"type":"header","text":"Depth First Search","value":"depth-first-search","line":52,"column":0,"depth":2},"breadth-first-search":{"type":"header","text":"Breadth First Search","value":"breadth-first-search","line":97,"column":0,"depth":2}},"children":[],"parent":"WfdADQRT7cfzOlj1XR8Uz","data":{}},"body":"<h1 id=\"traverse\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#traverse\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Traverse</h1>\n<p>When you navigate through a tree and find all the data it contains you call that a traversal, as it traverses the whole binary tree.</p>\n<p><img src=\"/Dendron/assets/images/2022-01-02-23-51-27.png\"></p>\n<p>The first method of traversal is called is pre-order traversal</p>\n<p>For this you can use a simple recursion algorithm to traverse the tree and print all the letters contained by the nodes.</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">BSTpre</span></span><span class=\"token punctuation\">(</span><span class=\"token parameter\">tree</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">.</span><span class=\"token property-access\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\"><span class=\"token maybe-class-name\">BSTpre</span></span><span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">.</span><span class=\"token property-access\">left</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\"><span class=\"token maybe-class-name\">BSTpre</span></span><span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">.</span><span class=\"token property-access\">right</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>The second method is called in-order traversal where you go around the tree counterclockwise. In this case the letter is only printed after it has traversed down the left branch. Using this method in a sorted binary tree, you are able to print all numbers in the correct order.</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">BSTinOrder</span></span><span class=\"token punctuation\">(</span><span class=\"token parameter\">tree</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\"><span class=\"token maybe-class-name\">BSTinOrder</span></span><span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">.</span><span class=\"token property-access\">left</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">.</span><span class=\"token property-access\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\"><span class=\"token maybe-class-name\">BSTinOrder</span></span><span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">.</span><span class=\"token property-access\">right</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>The last method is called post-order traversal similar to in-order traversal you go through the tree counterclockwise but you print the value of each node as you pass the right side instead of the left like in-order. Each value is printed the last time it is reached recursively as it moves left and then right to print the data last.</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">BSTpost</span></span><span class=\"token punctuation\">(</span><span class=\"token parameter\">tree</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\"><span class=\"token maybe-class-name\">BSTpost</span></span><span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">.</span><span class=\"token property-access\">left</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\"><span class=\"token maybe-class-name\">BSTpost</span></span><span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">.</span><span class=\"token property-access\">right</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">.</span><span class=\"token property-access\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>The method you use to traverse the tree depends on what you are trying to do.</p>\n<h2 id=\"depth-first-search\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#depth-first-search\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Depth First Search</h2>\n<div class=\"mermaid\">\n  graph TD;\n    a-->b;\n    a-->c;\n    c-->f;\n    b-->d;\n    b-->e;\n</div>\n<p>DFS is an algorithm where you go down a branch until the leaf is reached and process and proceed to another branch and so on. DFS usually make use of a stack to track all the visited nodes. For depth first search we can utilize any of the methods we outlined above. The basic implementation of a DFS on a binary tree is the pre-order traversal.</p>\n<p>So for the given binary tree above for our DFS if we utilized a pre-order traversal we would come up with the result shown below:</p>\n<p>pre-order : ['a', 'b', 'd', 'e', 'c', 'f' ]</p>\n<p>Below we can see similar implementation of of a depth first search on a tree, recursively and iteratively using a stack.</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//Recursive</span>\n<span class=\"token comment\">//under the hood js will use a stack structure to keep track of all recursive calls.</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">depthFirstTree</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">tree</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>tree <span class=\"token operator\">===</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> leftValue <span class=\"token operator\">=</span> <span class=\"token function\">depthFirstTree</span><span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">.</span><span class=\"token property-access\">left</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//[b,d,e]</span>\n  <span class=\"token keyword\">const</span> rightValue <span class=\"token operator\">=</span> <span class=\"token function\">depthFirstTree</span><span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">.</span><span class=\"token property-access\">right</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//[c,f]</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">[</span>tree<span class=\"token punctuation\">,</span> <span class=\"token spread operator\">...</span>leftValue<span class=\"token punctuation\">,</span> <span class=\"token spread operator\">...</span>rightValue<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//spread operator</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//DFS: ['a', 'b', 'd', 'e', 'c', 'f' ]</span>\n<span class=\"token comment\">//Iterative</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">depthFirstTree</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">tree</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>tree <span class=\"token operator\">===</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> stack <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>tree<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword control-flow\">while</span> <span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> current <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    result<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">push</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">.</span><span class=\"token property-access\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">.</span><span class=\"token property-access\">left</span><span class=\"token punctuation\">)</span> stack<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">push</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">.</span><span class=\"token property-access\">left</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">.</span><span class=\"token property-access\">right</span><span class=\"token punctuation\">)</span> stack<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">push</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">.</span><span class=\"token property-access\">right</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword control-flow\">return</span> result<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">//DFS: ['a', 'b', 'd', 'e', 'c', 'f' ]</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2 id=\"breadth-first-search\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#breadth-first-search\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Breadth First Search</h2>\n<div class=\"mermaid\">\n  graph TD;\n    a-->b;\n    a-->c;\n    c-->f;\n    b-->d;\n    b-->e;\n</div>\n<p>BFS is an algorithm that is counterpart to DFS, where DFS make use of a stack BFS makes use of a queue for its data array. Thus elements are visited in a first in first out method(FIFO). This can also be called level order traversal as all nodes on a given level are visited before going to the next level.</p>\n<p>BFS is usually used in maps for finding the shortest route (google maps) or finding how many friend links/ relations you are from someone (facebook or linkedin). BFS is used often when you are looking for the \"nearest\" solution.</p>\n<p>Below we can see an implementation of a breadth-first search on a tree. Here as it's a breadth First search we have to implement it iteratively using a queue.</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">breadthFirstTree</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">tree</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>tree <span class=\"token operator\">===</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> queue <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>tree<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword control-flow\">while</span> <span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> current <span class=\"token operator\">=</span> queue<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    result<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">push</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">.</span><span class=\"token property-access\">val</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">.</span><span class=\"token property-access\">left</span><span class=\"token punctuation\">)</span> queue<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">push</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">.</span><span class=\"token property-access\">left</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">.</span><span class=\"token property-access\">right</span><span class=\"token punctuation\">)</span> queue<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">push</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">.</span><span class=\"token property-access\">right</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword control-flow\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//BFS ['a', 'b', 'c', 'd', 'e', 'f']</span>\n</code></pre>\n<p>So in total the traversal algorithm are as follows:</p>\n<ul>\n<li>BFS</li>\n<li>pre-order traversal</li>\n<li>in-order traversal</li>\n<li>post-order traversal</li>\n</ul>\n<hr>\n<h2 id=\"backlinks\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#backlinks\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Backlinks</h2>\n<ul>\n<li><a href=\"/Dendron/notes/VWz2l3mWLt6icKBj8zwbs\">find-closest-value-in-bst</a></li>\n<li><a href=\"/Dendron/notes/nxnz8au39VJc43CWpp9sg\">Find Successor</a></li>\n<li><a href=\"/Dendron/notes/Cr43aZC95xv3USYVzz0QY\">Height Balanced</a></li>\n<li><a href=\"/Dendron/notes/g2pgFdlRqFmBGZAx2w5TX\">Invert Binary Tree</a></li>\n<li><a href=\"/Dendron/notes/0gK6ZmX5NdFs2il6C55XT\">Node Depths</a></li>\n<li><a href=\"/Dendron/notes/yV0szi3GGyuHyEbGYz3NZ\">Tree Diameter</a></li>\n<li><a href=\"/Dendron/notes/SimMK6mMAWR4H53Xqh9XB\">Tree Sum</a></li>\n</ul>","noteIndex":{"id":"vVFnvX3AZLb21JIc7L4gm","title":"Root","desc":"","updated":1641184503497,"created":1640015760017,"custom":{"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":"vault"},"contentHash":"dbe76e060067b9059e208c353b2be0be","links":[],"anchors":{"computer-science-library":{"type":"header","text":"Computer Science Library","value":"computer-science-library","line":8,"column":0,"depth":1}},"children":["Yvra9LpGoPLi4Kk2KKGsK","jL0XOOMd1sy4tgf2SWfg5","rydiHYJbn3JhvGgWrK9Sl","l8rNoqR6OrTiJzqzAsfms","Zd60tpALGBOrNJC2avO70","aVtnDm5TBmQfxOgRoc0m1","gh9HX9yN4MF2djOLFCV3N","BeyqjmB3iu9oewp7hCpqg","PbPnrOhcARThoz7ymnam8"],"parent":null,"data":{},"body":"\n# Computer Science Library\n\nThis is a collection of notes ranging from data structures and problems to specific knowledge of a programming language. It is a stored knowledge of different programming languages and applications for easy retrieval and note keeping.\n\nThis repository will be continually updated and maintained as knowledge base grows and aspects of languages are updated.\n\n![](/assets/images/2022-01-02-23-34-36.png)\n"},"collectionChildren":null,"customHeadContent":null,"config":{"version":4,"useFMTitle":true,"useNoteTitleForLink":true,"mermaid":true,"useKatex":true,"dev":{"enablePreviewV2":true},"site":{"assetsPrefix":"/Dendron","siteUrl":"https://nahombefekadu.github.io","copyAssets":true,"siteHierarchies":["root"],"siteRootDir":"docs","usePrettyRefs":true,"title":"Dendron","description":"Personal knowledge space","siteLastModified":true,"gh_edit_branch":"main","duplicateNoteBehavior":{"action":"useVault","payload":["vault"]},"usePrettyLinks":true,"siteNotesDir":"notes","siteFaviconPath":"favicon.ico","gh_edit_link":true,"gh_edit_link_text":"Edit this page on GitHub","gh_root":"docs/","gh_edit_view_mode":"edit","writeStubs":true,"siteIndex":"root"},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":false,"leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2,"vaultSelectionModeOnCreate":"smart"}},"randomNote":{},"insertNote":{"initialValue":"templates"},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"copyNoteLink":{}},"workspace":{"vaults":[{"fsPath":"vault"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"task":{"name":"","dateFormat":"","addBehavior":"childOfCurrent","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link"},"graph":{"zoomSpeed":1},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"enableUserTags":true,"enableHashTags":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":false,"enableEditorDecorations":true,"maxPreviewsCached":10,"maxNoteLength":204800},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableMermaid":true,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false}}},"__N_SSG":true}