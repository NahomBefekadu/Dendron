{"pageProps":{"note":{"id":"kI5aQqoWn5mBeryTGwZZT","title":"Recursion","desc":"","updated":1641703555262,"created":1641161342536,"custom":{},"fname":"data-structures.recursion","type":"note","vault":{"fsPath":"vault"},"contentHash":"505204c00c51823e818e33e3771995b1","links":[{"from":{"fname":"Problems.dynamic-programming.canSum","vaultName":"vault"},"type":"backlink","position":{"start":{"line":53,"column":1,"offset":963},"end":{"line":53,"column":30,"offset":992},"indent":[]},"value":"data-structures.recursion","alias":"data-structures.recursion"},{"from":{"fname":"Problems.dynamic-programming.fibonacci","vaultName":"vault"},"type":"backlink","position":{"start":{"line":49,"column":3,"offset":1212},"end":{"line":49,"column":32,"offset":1241},"indent":[]},"value":"data-structures.recursion","alias":"data-structures.recursion"},{"from":{"fname":"Problems.dynamic-programming.grid-traveler","vaultName":"vault"},"type":"backlink","position":{"start":{"line":49,"column":1,"offset":1203},"end":{"line":49,"column":30,"offset":1232},"indent":[]},"value":"data-structures.recursion","alias":"data-structures.recursion"},{"from":{"fname":"Problems.dynamic-programming.how-sum","vaultName":"vault"},"type":"backlink","position":{"start":{"line":51,"column":1,"offset":1254},"end":{"line":51,"column":30,"offset":1283},"indent":[]},"value":"data-structures.recursion","alias":"data-structures.recursion"},{"from":{"fname":"problems.binary-tree.branch-sums","vaultName":"vault"},"type":"backlink","position":{"start":{"line":98,"column":3,"offset":1712},"end":{"line":98,"column":32,"offset":1741},"indent":[]},"value":"data-structures.recursion","alias":"data-structures.recursion"},{"from":{"fname":"problems.binary-tree.find-successor","vaultName":"vault"},"type":"backlink","position":{"start":{"line":75,"column":3,"offset":1316},"end":{"line":75,"column":32,"offset":1345},"indent":[]},"value":"data-structures.recursion","alias":"data-structures.recursion"},{"from":{"fname":"problems.binary-tree.height-balanced","vaultName":"vault"},"type":"backlink","position":{"start":{"line":100,"column":3,"offset":1864},"end":{"line":100,"column":32,"offset":1893},"indent":[]},"value":"data-structures.recursion","alias":"data-structures.recursion"},{"from":{"fname":"problems.binary-tree.invert-binary-tree","vaultName":"vault"},"type":"backlink","position":{"start":{"line":100,"column":3,"offset":1389},"end":{"line":100,"column":32,"offset":1418},"indent":[]},"value":"data-structures.recursion","alias":"data-structures.recursion"},{"from":{"fname":"problems.binary-tree.node-depths","vaultName":"vault"},"type":"backlink","position":{"start":{"line":85,"column":3,"offset":1300},"end":{"line":85,"column":32,"offset":1329},"indent":[]},"value":"data-structures.recursion","alias":"data-structures.recursion"},{"from":{"fname":"problems.binary-tree.tree-diameter","vaultName":"vault"},"type":"backlink","position":{"start":{"line":93,"column":3,"offset":1573},"end":{"line":93,"column":32,"offset":1602},"indent":[]},"value":"data-structures.recursion","alias":"data-structures.recursion"},{"from":{"fname":"problems.binary-tree.tree-sum","vaultName":"vault"},"type":"backlink","position":{"start":{"line":43,"column":3,"offset":572},"end":{"line":43,"column":32,"offset":601},"indent":[]},"value":"data-structures.recursion","alias":"data-structures.recursion"}],"anchors":{},"children":[],"parent":"rydiHYJbn3JhvGgWrK9Sl","data":{}},"body":"<h1 id=\"recursion\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#recursion\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Recursion</h1>\n<p>Recursion is useful for many other data structures and computer programs. One of the best examples of recursion is the fibonacci sequence.</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">fibonacci</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">f</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>f <span class=\"token operator\">&#x3C;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"index error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">else</span> <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>f <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">else</span> <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>f <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">let</span> fn <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword control-flow\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&#x3C;</span> f <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    fn<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">push</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> fn<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword control-flow\">return</span> fn<span class=\"token punctuation\">[</span>f<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> <span class=\"token function\">fibonacci</span><span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//34</span>\n</code></pre>\n<p>To see how the call stacks work lets take a look at calling the function fibonacci(4).</p>\n<p>This would result in the function being called nine times, as it recursively calls the function each time as shown below.</p>\n<pre class=\"language-terminal\"><code class=\"language-terminal\">F(4) - F(3)  - F(2) - F(1)\n       F(3)  - F(2) - F(1)\n               F(2) - F(1)\n</code></pre>\n<hr>\n<h2 id=\"backlinks\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#backlinks\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Backlinks</h2>\n<ul>\n<li><a href=\"/Dendron/notes/jrCTtqDo2OppBEON5V4T2\">canSum</a></li>\n<li><a href=\"/Dendron/notes/cbtfKehIOTrO5jfNiIp9f\">fibonacci</a></li>\n<li><a href=\"/Dendron/notes/T4qw6hGr3CTLuWfyAcBHO\">grid-traveler</a></li>\n<li><a href=\"/Dendron/notes/vuKT7FsbEJKavKvmKOxyN\">HowSum</a></li>\n<li><a href=\"/Dendron/notes/p9MhOqyMCZX5Gy9vcGV0O\">Branch Sums</a></li>\n<li><a href=\"/Dendron/notes/nxnz8au39VJc43CWpp9sg\">Find Successor</a></li>\n<li><a href=\"/Dendron/notes/Cr43aZC95xv3USYVzz0QY\">Height Balanced</a></li>\n<li><a href=\"/Dendron/notes/g2pgFdlRqFmBGZAx2w5TX\">Invert Binary Tree</a></li>\n<li><a href=\"/Dendron/notes/0gK6ZmX5NdFs2il6C55XT\">Node Depths</a></li>\n<li><a href=\"/Dendron/notes/yV0szi3GGyuHyEbGYz3NZ\">Tree Diameter</a></li>\n<li><a href=\"/Dendron/notes/SimMK6mMAWR4H53Xqh9XB\">Tree Sum</a></li>\n</ul>","noteIndex":{"id":"vVFnvX3AZLb21JIc7L4gm","title":"Root","desc":"","updated":1641184503497,"created":1640015760017,"custom":{"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":"vault"},"contentHash":"dbe76e060067b9059e208c353b2be0be","links":[],"anchors":{"computer-science-library":{"type":"header","text":"Computer Science Library","value":"computer-science-library","line":8,"column":0,"depth":1}},"children":["Yvra9LpGoPLi4Kk2KKGsK","jL0XOOMd1sy4tgf2SWfg5","rydiHYJbn3JhvGgWrK9Sl","l8rNoqR6OrTiJzqzAsfms","Zd60tpALGBOrNJC2avO70","aVtnDm5TBmQfxOgRoc0m1","gh9HX9yN4MF2djOLFCV3N","BeyqjmB3iu9oewp7hCpqg","PbPnrOhcARThoz7ymnam8"],"parent":null,"data":{},"body":"\n# Computer Science Library\n\nThis is a collection of notes ranging from data structures and problems to specific knowledge of a programming language. It is a stored knowledge of different programming languages and applications for easy retrieval and note keeping.\n\nThis repository will be continually updated and maintained as knowledge base grows and aspects of languages are updated.\n\n![](/assets/images/2022-01-02-23-34-36.png)\n"},"collectionChildren":null,"customHeadContent":null,"config":{"version":4,"useFMTitle":true,"useNoteTitleForLink":true,"mermaid":true,"useKatex":true,"dev":{"enablePreviewV2":true},"site":{"assetsPrefix":"/Dendron","siteUrl":"https://nahombefekadu.github.io","copyAssets":true,"siteHierarchies":["root"],"siteRootDir":"docs","usePrettyRefs":true,"title":"Dendron","description":"Personal knowledge space","siteLastModified":true,"gh_edit_branch":"main","duplicateNoteBehavior":{"action":"useVault","payload":["vault"]},"usePrettyLinks":true,"siteNotesDir":"notes","siteFaviconPath":"favicon.ico","gh_edit_link":true,"gh_edit_link_text":"Edit this page on GitHub","gh_root":"docs/","gh_edit_view_mode":"edit","writeStubs":true,"siteIndex":"root"},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":false,"leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2,"vaultSelectionModeOnCreate":"smart"}},"randomNote":{},"insertNote":{"initialValue":"templates"},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"copyNoteLink":{}},"workspace":{"vaults":[{"fsPath":"vault"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"task":{"name":"","dateFormat":"","addBehavior":"childOfCurrent","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link"},"graph":{"zoomSpeed":1},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"enableUserTags":true,"enableHashTags":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":false,"enableEditorDecorations":true,"maxPreviewsCached":10,"maxNoteLength":204800},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableMermaid":true,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false}}},"__N_SSG":true}